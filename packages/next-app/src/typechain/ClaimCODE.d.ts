/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ClaimCODEInterface extends ethers.utils.Interface {
  functions: {
    "claimPeriodEnds()": FunctionFragment;
    "claimTokens(uint256,bytes32[])": FunctionFragment;
    "codeToken()": FunctionFragment;
    "disableMinting()": FunctionFragment;
    "disableMintingByGovernance()": FunctionFragment;
    "isClaimed(uint256)": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "mintByGovernance(address,uint256)": FunctionFragment;
    "mintGovernance()": FunctionFragment;
    "mintingEnabled()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMerkleRoot(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimPeriodEnds",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [BigNumberish, BytesLike[]],
  ): string;
  encodeFunctionData(functionFragment: "codeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disableMinting",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "disableMintingByGovernance",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "mintByGovernance",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "mintGovernance",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "mintingEnabled",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: "claimPeriodEnds",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "codeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableMinting",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableMintingByGovernance",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintByGovernance",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintGovernance",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintingEnabled",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "MerkleRootChanged(bytes32)": EventFragment;
    "MintedByGovernance(address,uint256)": EventFragment;
    "MintingDisabled()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MerkleRootChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintedByGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintingDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ClaimEvent = TypedEvent<
  [string, BigNumber] & { _claimant: string; _amount: BigNumber }
>;

export type MerkleRootChangedEvent = TypedEvent<
  [string] & { _merkleRoot: string }
>;

export type MintedByGovernanceEvent = TypedEvent<
  [string, BigNumber] & { _target: string; _amount: BigNumber }
>;

export type MintingDisabledEvent = TypedEvent<[] & {}>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class ClaimCODE extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ClaimCODEInterface;

  functions: {
    claimPeriodEnds(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimTokens(
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    codeToken(overrides?: CallOverrides): Promise<[string]>;

    disableMinting(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    disableMintingByGovernance(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isClaimed(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    mintByGovernance(
      _target: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    mintGovernance(overrides?: CallOverrides): Promise<[boolean]>;

    mintingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  claimPeriodEnds(overrides?: CallOverrides): Promise<BigNumber>;

  claimTokens(
    _amount: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  codeToken(overrides?: CallOverrides): Promise<string>;

  disableMinting(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  disableMintingByGovernance(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  mintByGovernance(
    _target: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  mintGovernance(overrides?: CallOverrides): Promise<boolean>;

  mintingEnabled(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    claimPeriodEnds(overrides?: CallOverrides): Promise<BigNumber>;

    claimTokens(
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<void>;

    codeToken(overrides?: CallOverrides): Promise<string>;

    disableMinting(overrides?: CallOverrides): Promise<void>;

    disableMintingByGovernance(overrides?: CallOverrides): Promise<void>;

    isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    mintByGovernance(
      _target: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    mintGovernance(overrides?: CallOverrides): Promise<boolean>;

    mintingEnabled(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    "Claim(address,uint256)"(
      _claimant?: string | null,
      _amount?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { _claimant: string; _amount: BigNumber }
    >;

    Claim(
      _claimant?: string | null,
      _amount?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { _claimant: string; _amount: BigNumber }
    >;

    "MerkleRootChanged(bytes32)"(
      _merkleRoot?: null,
    ): TypedEventFilter<[string], { _merkleRoot: string }>;

    MerkleRootChanged(
      _merkleRoot?: null,
    ): TypedEventFilter<[string], { _merkleRoot: string }>;

    "MintedByGovernance(address,uint256)"(
      _target?: string | null,
      _amount?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { _target: string; _amount: BigNumber }
    >;

    MintedByGovernance(
      _target?: string | null,
      _amount?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { _target: string; _amount: BigNumber }
    >;

    "MintingDisabled()"(): TypedEventFilter<[], {}>;

    MintingDisabled(): TypedEventFilter<[], {}>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    claimPeriodEnds(overrides?: CallOverrides): Promise<BigNumber>;

    claimTokens(
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    codeToken(overrides?: CallOverrides): Promise<BigNumber>;

    disableMinting(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    disableMintingByGovernance(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isClaimed(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    mintByGovernance(
      _target: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    mintGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    mintingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimPeriodEnds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimTokens(
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    codeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableMinting(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    disableMintingByGovernance(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isClaimed(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintByGovernance(
      _target: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    mintGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
